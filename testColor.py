import lcd_bus
from micropython import const
import machine


# display settings
_WIDTH = const(240)
_HEIGHT = const(320)
_BL = const(21)
_RST = const(17)
_DC = const(2)

_MOSI = const(13)
#_MISO = const(12)
_SCK = const(14)
_HOST = const(1)  # SPI2

#define XPT2046_IRQ 36
#define XPT2046_MOSI 32
#define XPT2046_MISO 39
#define XPT2046_CLK 25
#define XPT2046_CS 33

_LCD_CS = const(15)
_LCD_FREQ = const(40000000)

#_TOUCH_CS = const(9)
#_TOUCH_FREQ = const(1000000)

spi_bus = machine.SPI.Bus(
    host=_HOST,
    mosi=_MOSI,
    #miso=_MISO,
    sck=_SCK
)

display_bus = lcd_bus.SPIBus(
    spi_bus=spi_bus,
    freq=_LCD_FREQ,
    dc=_DC,
    cs=_LCD_CS,
)


import ili9341
import lvgl as lv

display = ili9341.ILI9341(
    data_bus=display_bus,
    display_width=_WIDTH,
    display_height=_HEIGHT,
    reset_pin=_RST,
    reset_state=ili9341.STATE_LOW,
    backlight_pin=_BL,
    backlight_on_state=ili9341.STATE_HIGH,
    color_space=lv.COLOR_FORMAT.RGB565,
    color_byte_order=ili9341.BYTE_ORDER_BGR,
    rgb565_byte_swap=True
)

import task_handler  # NOQA
import xpt2046  # NOQA

display.set_power(True)
display.init(1)
display.set_color_inversion(False)
display.set_rotation(lv.DISPLAY_ROTATION._90)
display.set_backlight(100)

#touch_dev = machine.SPI.Device(
#    spi_bus=spi_bus,
#    freq=_TOUCH_FREQ,
#    cs=_TOUCH_CS
#)

#indev = xpt2046.XPT2046(touch_dev,debug=False,startup_rotation=lv.DISPLAY_ROTATION._0)

#indev.calibrate()

th = task_handler.TaskHandler()

scrn = lv.screen_active()

#btnm = lv.buttonmatrix(scrn)
#btnm.add_event_cb(lambda e: btnm_event_handler(e,scrn),lv.EVENT.VALUE_CHANGED, None)
#btnm.set_size(230,120)
#btnm.align(1,5,5)



tabview = lv.tabview(scrn)
tabview.set_tab_bar_size(30)

# Set tabview background color
# tabview.set_style_bg_color(lv.color_hex(0xffffff), 0)  # White background
# tabview.set_style_bg_opa(255, 0)  # Make sure it's fully opaque

tab1 = tabview.add_tab("SemiBlock")
tab2 = tabview.add_tab("Multimeter")
tab3 = tabview.add_tab("Oscilloscope")

label3 = lv.label(tab1)
label3.set_text("Semi Block Logo")
label3.align(lv.ALIGN.TOP_MID, 0, 60)

# Add Semi block logo image
img = lv.image(tab1)
img.set_size(200, 91)

# Add color inversion to the image

# Try to load the image file, fallback to symbol if it fails
# try:
#     img.set_src("semi_block_logo.bin")
#     # img.set_style_img_recolor_opa(255, 0)  # Enable recoloring at full opacity
#     # img.set_style_img_recolor(lv.color_hex(0xFFFFFF), 0)  # Recolor with white (inverts colors)
#     print("Image loaded successfully")
#     print(f"Image size set to: 200x91")
#     print(f"Image positioned in tab1")
    
# except Exception as e:
#     print(f"Failed to load image: {e}")
#     # Fallback to a built-in symbol for testing
#     img.set_src(lv.SYMBOL.HOME)  # This should definitely work
#     print("Using fallback symbol")
# img.align(lv.ALIGN.CENTER, 0, 20)



# Test colors
colors = [
    (lv.color_hex(0xFF0000), "Red"),  # Pure red
    (lv.color_hex(0x00FF00), "Green"),  # Pure green
    (lv.color_hex(0x0000FF), "Blue"),  # Pure blue
    (lv.color_hex(0xFFFFFF), "White"),  # White
    (lv.color_hex(0x000000), "Black")   # Black
]
for i, (color, name) in enumerate(colors):
    rect = lv.obj(tab1)
    rect.set_size(30, 30)
    rect.set_style_bg_color(color, 0)
    rect.set_style_bg_opa(255, 0)
    rect.align(lv.ALIGN.TOP_LEFT, 10, 10 + i * 35)
    label = lv.label(tab1)
    label.set_text(name)
    label.align_to(rect, lv.ALIGN.OUT_RIGHT_MID, 10, 0)

tab2.set_flex_flow(lv.FLEX_FLOW.COLUMN)
lab21 = lv.label(tab2)
lab21.set_text('Group 1')
chk21 = lv.checkbox(tab2)
chk21.set_text('Option 1')
chk22 = lv.checkbox(tab2)
chk22.set_text('Option 2')
chk23 = lv.checkbox(tab2)
chk23.set_text('Option 3')
chk24 = lv.checkbox(tab2)
chk24.set_text('Option 4')
lab22 = lv.label(tab2)
lab22.set_text('Group 2')
chk25 = lv.checkbox(tab2)
chk25.set_text('Option 5')
chk26 = lv.checkbox(tab2)
chk26.set_text('Option 6')
chk27 = lv.checkbox(tab2)
chk27.set_text('Option 7')
chk28 = lv.checkbox(tab2)
chk28.set_text('Option 8')

o = 1
def btnm_event_handler(e,ta):
    global o
    obj = e.get_target()
    o=obj
    print("Toggled")

# Example: Embed a small LVGL image as a Python array (replace with your own image data)
# This is a 16x16, RGB565, no alpha, no compression, generated by LVGL image converter as C array
# You can use your own image data here (see LVGL image converter, output as C array, copy the bytes)
import array

# Example image: 16x16, all white (replace with your own data)
example_img_data = array.array('B', [
    0x89, 0x4C, 0x16, 0x00, 0x10, 0x00, 0x10, 0x00, 0x01, 0x1F, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00,
    # ... (rest of your image data here, this is just a header and a few bytes for demo)
] + [0xFF, 0xFF] * (16*16))  # fill with white pixels

example_img_dsc = lv.img_dsc_t({
    'data_size': len(example_img_data),
    'data': example_img_data,
    'header': {
        'cf': lv.COLOR_FORMAT.RGB565,
        'always_zero': 0,
        'reserved': 0,
        'w': 16,
        'h': 16
    }
})

# Display the embedded image
img2 = lv.image(tab1)
img2.set_src(example_img_dsc)
img2.align(lv.ALIGN.CENTER, 0, 60)
